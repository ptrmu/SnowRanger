[
    {
        "id": "8b6e8b9086aeaa04",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1b196697ebce336b",
        "type": "mqtt in",
        "z": "8b6e8b9086aeaa04",
        "name": "",
        "topic": "snowdata/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "8c3750022e074c7a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 80,
        "wires": [
            [
                "aab29e708bbc6f1c",
                "b205464b1f58218b"
            ]
        ]
    },
    {
        "id": "aab29e708bbc6f1c",
        "type": "debug",
        "z": "8b6e8b9086aeaa04",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 80,
        "wires": []
    },
    {
        "id": "ed712b356ef34333",
        "type": "influxdb out",
        "z": "8b6e8b9086aeaa04",
        "influxdb": "854fa309df2747e8",
        "name": "SnowMetrics_RangerDistance",
        "measurement": "distance",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "SnowMetrics",
        "bucket": "SnowRanger",
        "x": 470,
        "y": 320,
        "wires": []
    },
    {
        "id": "b205464b1f58218b",
        "type": "function",
        "z": "8b6e8b9086aeaa04",
        "name": "Convert to number",
        "func": "let payload = msg.payload; \npayload.distance = Number(payload.ranger_distance);\npayload.time = payload.timestamp;\ndelete payload.ranger_distance;\ndelete payload.timestamp\n\nconst parts = msg.topic.split('/'); // Split the topic into parts using \"/\"\nconst fromId = parts[1]; // Take the part after the first slash\n\nmsg.payload = [\n    payload,\n    {\n        \"from\": fromId,\n    }];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 200,
        "wires": [
            [
                "41aaf4f189868b06",
                "ed712b356ef34333"
            ]
        ]
    },
    {
        "id": "41aaf4f189868b06",
        "type": "debug",
        "z": "8b6e8b9086aeaa04",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 200,
        "wires": []
    },
    {
        "id": "8c3750022e074c7a",
        "type": "mqtt-broker",
        "name": "Mosquitto on mypi",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "854fa309df2747e8",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Localhost",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    }
]